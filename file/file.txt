"Name" = 'File Grammar'
"Author"   = 'MI Processamento de Linguagens - T03'
"Version"  = '0.1'
"About" = ''

"Start Symbol" = <arquivo>
"Case Sensitive" = True

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{String Chars} = {Printable} + {HT} - ["]
{Chars} = {Printable} + {HT} - ['']              

! -------------------------------------------------
! Terminals
! -------------------------------------------------

Identificador   = {Letter}({Letter}|{AlphaNumeric}|_)*
Numero = {Number} + ('.'{Number} + )?
String = '"' {String Chars}* '"'
Char = '' {Chars} ''
Bool = 'verdadeiro' | 'falso'
Tipo = 'inteiro' | 'real' | 'cadeia' | 'caractere' | 'booleano'

! -------------------------------------------------
! Rules
! -------------------------------------------------

! The grammar starts below

<lambda> ::=

!Estrutura do arquivo
<arquivo> ::= <constantes> <var_global> <programa> <funcoes>

<constantes> ::= <declaracao_constante><constantes> | <lambda>
<var_global> ::= <declaracao_variavel><var_global> | <lambda>
<funcoes> ::= <funcao><funcoes> | <lambda>

!Constantes
<declaracao_constante> ::=  'const' <const_linha>
<const_linha> ::=  Tipo <conteudo_const>
<conteudo_const> ::= Identificador<termo_conteudo_const>
<termo_conteudo_const> ::= <vetor> '=' <valor_atribuicao> <lista_constante> | '=' <valor_atribuicao> <lista_constante>
<lista_constante> ::= ',' <conteudo_const> |   ';'

!Variável
<declaracao_variavel> ::= 'var' <var_linha>
<var_linha> ::= Tipo <conteudo_variavel>
<conteudo_variavel> ::= Identificador<termo_conteudo_var>
<termo_conteudo_var> ::= <vetor><lista_variavel> | <lista_variavel> | ';'
<lista_variavel> ::= ',' <conteudo_variavel> | ';'

!Vetor
<vetor> ::=  '<<' <id_num> <lista_vetor>
<lista_vetor> ::= ',' <id_num><lista_vetor> | '>>'

!Programa
<programa> ::= 'programa' <bloco>

!Comando escreva
<comando_escr> ::= 'escreva' '('<conteudo_escreva>
<conteudo_escreva> ::= String <lista_escr> | Char <lista_escr> | <exp_arit> <lista_escr>
<lista_escr> ::= ','  <conteudo_escreva> | ')' ';'

!Comando leia
<comando_leia> ::= 'leia' '(' <conteudo_leia>
<conteudo_leia> ::= Identificador <lista_leia>
<lista_leia> ::= ',' <conteudo_leia> | ')' ';'

!Comando lógico (se..entao..senao, enquanto)
<comando_logico> ::= <comando_se> | <comando_enquanto>

!Comando se/senao
<comando_se> ::= 'se' '('<exp_logica> ')' 'entao' <bloco> <comando_senao>
<comando_senao> ::= 'senao' <bloco> | <lambda>

!Comando enquanto
<comando_enquanto> ::= 'enquanto' '(' <exp_logica> ')' 'faca' <bloco>

!Atribuição
<atribuicao> ::= Identificador<termo_atribuicao>
<termo_atribuicao> ::= <vetor><conteudo_atribuicao> | <conteudo_atribuicao>
<conteudo_atribuicao> ::= '=' <valor_atribuicao> ';'
<valor_atribuicao> ::= String | Char | Bool | <exp_arit> | <vetor>

!Bloco
<bloco> ::= 'inicio' <conteudo_bloco>
<conteudo_bloco> ::= <declaracao_variavel> <conteudo_bloco> | <comando_logico> <conteudo_bloco> | <comando_escr> <conteudo_bloco> | <comando_leia> <conteudo_bloco> | <chamada_funcao_fechada> <conteudo_bloco> | <atribuicao> <conteudo_bloco> | 'fim'

!Identificador ou Numero
<id_num> ::= Identificador<termo_id> | Numero
<termo_id> ::= <vetor> | <lambda>

!Função
<funcao> ::= 'funcao' <termo_funcao>
<termo_funcao> ::= Tipo Identificador <parametro_funcao> <bloco> | Identificador <parametro_funcao> <bloco>
<parametro_funcao> ::= '('<termo_parametro_funcao>
<termo_parametro_funcao> ::= <conteudo_parametro> | ')'
<conteudo_parametro> ::= Tipo Identificador<conteudo_param_termo>
<conteudo_param_termo> ::= <vetor><lista_parametro> | <lista_parametro>
<lista_parametro> ::= ',' <conteudo_parametro> | ')'

!Chamada de Função
<chamada_funcao_fechada> ::= Identificador<parametro_chamada>
<parametro_chamada> ::= '(' <conteudo_param_chamada> ')' ';'
<conteudo_param_chamada> ::= <exp_arit> <lista_param_chamada> | <lambda>
<lista_param_chamada> ::= ',' <conteudo_param_chamada> | <lambda>
                       
<chamada_funcao> ::= Identificador<parametro_chamada_aberta>
<parametro_chamada_aberta> ::= '(' <conteudo_param_chamada> ')'

!Expressão aritmética
<exp_arit> ::=  <mulexp_arit> <termo_exp_arit>
<termo_exp_arit> ::=  '+' <exp_arit> | '-' <exp_arit> | <lambda>
<mulexp_arit> ::= <rootexp_arit> <termo_mulexp_arit>
<termo_mulexp_arit> ::=  '*' <mulexp_arit> | '/' <mulexp_arit> | <lambda>
<rootexp_arit> ::= '(' <exp_arit> ')' | Numero | <chamada_funcao>

!Expressões relacionais
<exp_relacional> ::= <id_num> <termo_exp_relacional>
<termo_exp_relacional> ::=  '=' <relacional_igual> |  '>' <relacional_outros> | '<' <relacional_outros> |  '<>' <relacional_outros> |  '>=' <relacional_outros> |  '<=' <relacional_outros>
<relacional_igual> ::= Identificador | Numero | String | Char | Bool | <chamada_funcao>
<relacional_outros> ::= <id_num> | <chamada_funcao>

!Expressões lógicas
<exp_logica> ::= <rootexp_logica> <termo_exp_logica> | <nao_exp_logica>
<termo_exp_logica> ::= 'e' <exp_logica> |  'ou' <exp_logica>
<nao_exp_logica> ::= 'nao' <rootexp_logica> | <rootexp_logica>
<rootexp_logica> ::=  <exp_relacional> | '('<exp_logica> ')'
